data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability + isMale, #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 85
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability + isMale, #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 85
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 85
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~  energy + loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 80
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   loudness + acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 80
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
prp(tree.pruned,varlen=15)
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   acousticness	+ danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   danceability , #+ acousticness + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~   danceability  + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 90
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~ energy +  danceability  + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
cut = 86
data.tree <- mutate(data.tree, popbin = factor(case_when(track_popularity >= cut ~ "H",
#track_popularity < cut ~ "M",
TRUE                ~ "M")))
# cut.hi <-  .70
# cut.trash <- .35
# data.tree.3cut <- mutate(data.tree, dancebin = factor(case_when(danceability >= cut.hi ~ "H",
#                                                                  danceability < cut.trash ~ "L",
#                                                                  #danceability < cut.trash ~ "L")))
#                                                                TRUE                ~ "M")))
data.tree %>% count(popbin)
#data.tree <- data.tree.3cut
index.collection <- sample(nrow(data.tree ),nrow(data.tree )*0.80)
data.tree.train <- data.tree[index.collection,]
data.tree.test <- data.tree[-index.collection,]
data.tree.train %>% count(popbin)
# tree.beta.fit = rpart(parms=parms, control = 0.001, data=data.tree.train.popular, data.tree.train.popular$danceability ~   + energy + key + loudness + acousticness	+ instrumentalness + liveness + valence + 	tempo )
set.seed(13603433)
#key + loudness + acousticness	+ instrumentalness + liveness +
col=c(12:26)
data.tree.train.sub <- data.tree.train[,col]
tree.spotify.1 <- rpart(popbin ~ energy +  danceability  + loudness + acousticness	,
data = data.tree.train.sub, method = "class", subset = index.collection)
cp_choose <- tree.spotify.1$cptable[,1][which.min(tree.spotify.1$cptable[,4])]
tree.pruned <- prune.rpart(tree.spotify.1, cp_choose)
tree.pred <- predict(tree.pruned, newdata = data.tree.test , type = "class")
confusion.matrix <- table(tree.pred, data.tree.test$popbin)
confusion.matrix
tree.pruned
tree.spotify.1
sum(diag(confusion.matrix)) / sum(confusion.matrix)  # the % accuracy on the test set.
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
prp(tree.pruned,varlen=15)
windows(20,20)
rpart.plot(tree.pruned, main="Popular Song define as track_popularity >= 86")
windows(20,20)
prp(tree.pruned,varlen=15)
#+ key + loudness + acousticness
#+ key + loudness + acousticness	+ instrumentalness + liveness
# instrumentalness + liveness + key
fit <- ctree(popbin ~ energy +  danceability  + loudness + acousticness,
data=data.tree)
windows(20,20)
plot(fit, main="Dance: Cutoff = 70%")
predictions <- predict(fit, data.tree.test)
table(predictions, data.tree.test$dancebin)
windows(20,20)
plot(fit, main="Popularity: Cutoff = 86%")
